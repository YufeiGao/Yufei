#include <iostream>
#include <iomanip>
#include <cmath>
#include <fstream>
#include <cstdlib>
#include <algorithm>
#include <math.h>
#include <random>

using namespace std;
int seed = 5;
std::default_random_engine generator(seed);
double get_uniform() // uniform generator
{
	std::uniform_real_distribution <double> distribution(0.0, 1.0);
	double number = distribution(generator);
	return (number);
}
double max(double a, double b) {
	return (b < a) ? a : b;
}
double gaussrand() // box muller
{
	double U1, U2;
	double pi = 3.1415926;
	U1 = get_uniform();
	U2 = get_uniform();
	double R = -2 * log(U1);
	double V = 2 * pi * U2;
	return sqrt(R)*cos(V);
}
double phi(double x)
{
	return 1 / (1 + exp(1 - x));
}
int main()
{
	//Q1
	//Standard monte carlo for V
	double sum_v = 0;
	for (int i = 1; i <= 10000; i++)
	{
		double x = gaussrand();
		sum_v += phi(x);
	}
	double v = sum_v / 10000.0;
	cout << "expectation using monte carlo:" << v << endl;

	// Variance for V
	double sum_var = 0;
	for (int i = 1; i <= 10000; i++)
	{
		double x = gaussrand();
		sum_var += pow(phi(x) - v, 2.0);
	}
	double v_std = sqrt(sum_var / (10000 * 9999)) / sqrt(10000);
	cout << "monte carlo std:" << v_std << endl;

	//antithetic for V
	double sum_v_anti = 0.0;
	for (int i = 1; i <= 5000; i++)
	{
		double x = gaussrand();
		sum_v_anti += (phi(x) + phi(-x));
	}
	double v_anti = sum_v_anti / 10000.0;
	cout << "expectation using antithetic:" << v_anti << endl;

	//antithetic for var
	double sum_var_anti = 0.0;
	for (int i = 1; i <= 5000; i++)
	{
		double x = gaussrand();
		sum_var_anti += pow(0.5*(phi(x)+phi(-x)) - v_anti, 2.0);
	}
	double v_std_anti = sqrt(sum_var_anti / (5000 * 4999)) / sqrt(5000);
	cout << "antithetic std:" << v_std_anti << endl;
	system("pause");

	//Q2 plain vanilla monte carlo
	double S0 = 99.0;
	double r = 0.03;
	double K = 105;
	double B = 90;
	double m = 25;
	double sigma = 0.6;
	double h = 1 / 252.0;
	double s_now;
	double sum_call = 0.0;
	double down_out_call;
	vector <double> S;
	for (int n = 1; n <= 10000; n++)
	{
		double flag = 1.0;
		S.clear();
		S.push_back(S0);
		for (int i = 1; i <= m; i++)
		{
			s_now = S[i - 1] * exp((r - 0.5*sigma*sigma)*h + sigma*sqrt(h)*gaussrand());
			if (s_now < B)
				flag = 0;
			S.push_back(s_now);
		}
		sum_call += flag*max(S[m] - K, 0.0);
	}
	down_out_call = sum_call / 10000.0;
	cout << "option price:" << down_out_call << endl;
	system("pause");

	// std error and actural error
	double down_out_std = 0;
	for (int n = 1; n <= 10000; n++)
	{
		double flag = 1.0;
		S.clear();
		S.push_back(S0);
		for (int i = 1; i <= m; i++)
		{
			s_now = S[i - 1] * exp((r - 0.5*sigma*sigma)*h + sigma*sqrt(h)*gaussrand());
			if (s_now < B)
				flag = 0;
			S.push_back(s_now);
		}
		down_out_std += pow(flag*max(S[m] - K, 0.0)-down_out_call,2.0);
	}
	down_out_std = sqrt(down_out_std / (10000.0 * 9999));
	double se = down_out_std / sqrt(10000.0);
	double err = 4.64765 - down_out_call;
	cout << "standard error:" << se << endl;
	cout << "actural error:" << err << endl;
	system("pause");

	// Control Variate
	// calculate the european call price
	double call = 0.0;
	sum_call = 0.0;
	for (int n = 1; n <= 10000; n++) // monte simulation
	{
		S.clear();
		S.push_back(S0);
		for (int i = 1; i <= m; i++)
		{
			s_now = S[i - 1] * exp((r - 0.5*sigma*sigma)*h + sigma*sqrt(h)*gaussrand());
			S.push_back(s_now);
		}
		sum_call += max(S[m] - K, 0.0); // expected payoff
	}
	call = sum_call / 10000.0;

	//calculate b
	double b;
	double sum_euro_var=0.0;
	for (int n = 1; n <= 10000; n++) // monte simulation
	{
		S.clear();
		S.push_back(S0);
		for (int i = 1; i <= m; i++)
		{
			s_now = S[i - 1] * exp((r - 0.5*sigma*sigma)*h + sigma*sqrt(h)*gaussrand());
			S.push_back(s_now);
		}
		sum_euro_var += pow((max(S[m] - K, 0.0) - call), 2.0); // expected payoff
	}

	double sum_cov=0.0;
	for (int n = 1; n <= 10000; n++)
	{
		double flag = 1.0;
		S.clear();
		S.push_back(S0);
		for (int i = 1; i <= m; i++)
		{
			s_now = S[i - 1] * exp((r - 0.5*sigma*sigma)*h + sigma*sqrt(h)*gaussrand());
			if (s_now < B)
				flag = 0;
			S.push_back(s_now);
		}
		sum_cov += (flag*max(S[m] - K, 0.0)-down_out_call)*(max(S[m] - K, 0.0)-call);
	}
	b = sum_cov / sum_euro_var;
	cout << b;
	system("pause");

	// implementation
	double sum_control_var = 0.0;
	double control_var;
	for (int n = 1; n <= 10000; n++)
	{
		double flag = 1.0;
		S.clear();
		S.push_back(S0);
		for (int i = 1; i <= m; i++)
		{
			s_now = S[i - 1] * exp((r - 0.5*sigma*sigma)*h + sigma*sqrt(h)*gaussrand());
			if (s_now < B)
				flag = 0;
			S.push_back(s_now);
		}
		sum_control_var += flag*max(S[m] - K, 0.0) - b*(max(S[m] - K, 0.0) - call);
	}
	control_var = sum_control_var / 10000.0;
	cout << "price by using control variate:" << control_var << endl;
	system("pause");

	// standard error and actural error
	double control_std = 0;
	for (int n = 1; n <= 10000; n++)
	{
		double flag = 1.0;
		S.clear();
		S.push_back(S0);
		for (int i = 1; i <= m; i++)
		{
			s_now = S[i - 1] * exp((r - 0.5*sigma*sigma)*h + sigma*sqrt(h)*gaussrand());
			if (s_now < B)
				flag = 0;
			S.push_back(s_now);
		}
		control_std += pow(flag*max(S[m] - K, 0.0) - b*(max(S[m] - K, 0.0) - call) - control_var, 2.0);
	}
	control_std = sqrt(control_std / (10000.0 * 9999));
	double se_control = control_std / sqrt(10000.0);
	double err_control = 4.64765 - control_var;
	cout << "standard error:" << se_control << endl;
	cout << "actural error:" << err_control << endl;
	system("pause");
}
