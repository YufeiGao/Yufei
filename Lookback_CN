def find_CN_lookback(S, r, alpha, sigma, time, no_S_steps, no_t_steps):
    
    # range for y: -no_S_step*ds<..<-ds, 0, ds<..<no_S_steps*ds
    M = 2*no_S_steps;
    delta_S = S/float(M);
    S_values = np.zeros([M+1, 1]);
    for i in range(M+1):
        S_values[i,0] = delta_S*(i - no_S_steps);
    N = no_t_steps;
    delta_t = time / float(N);
    y_values = np.zeros([M-1, 1]);
    for i in range(M-1):
        y_values[i,0] = S_values[i+1,0];
    
    #set the matrix
    # A1 is the matrix at time j+1
    A1 = np.zeros([M-1, M-1]);
    A1[0,0] = 1-0.5*sigma*sigma*delta_t/(delta_S**2);
    A1[0,1] = -(r+0.5*sigma*sigma)*delta_t/(4*delta_S)+0.25*sigma*sigma*delta_t/(delta_S**2);
    for i in range(1,M-2):
        A1[i,i+1] = -(r+0.5*sigma*sigma)*delta_t/(4*delta_S)+0.25*sigma*sigma*delta_t/(delta_S**2);
        A1[i,i] = 1-0.5*sigma*sigma*delta_t/(delta_S**2);
        A1[i,i-1] = (r+0.5*sigma*sigma)*delta_t/(4*delta_S)+0.25*sigma*sigma*delta_t/(delta_S**2);
    A1[M-2,M-2] = 1-0.5*sigma*sigma*delta_t/(delta_S**2);
    A1[M-2,M-3] = (r+0.5*sigma*sigma)*delta_t/(4*delta_S)+0.25*sigma*sigma*delta_t/(delta_S**2);
    a1 = (r+0.5*sigma*sigma)*delta_t/(4*delta_S)+0.25*sigma*sigma*delta_t/(delta_S**2);
    b1 = -(r+0.5*sigma*sigma)*delta_t/(4*delta_S)+0.25*sigma*sigma*delta_t/(delta_S**2);
    
    # A2 is the matrix at time j
    A2 = np.zeros([M-1, M-1]);
    A2[0,0] = 1+0.5*sigma*sigma*delta_t/(delta_S**2);
    A2[0,1] = (r+0.5*sigma*sigma)*delta_t/(4*delta_S)-0.25*sigma*sigma*delta_t/(delta_S**2);
    for i in range(1,M-2):
        A2[i,i+1] = (r+0.5*sigma*sigma)*delta_t/(4*delta_S)-0.25*sigma*sigma*delta_t/(delta_S**2);
        A2[i,i] = 1+0.5*sigma*sigma*delta_t/(delta_S**2);
        A2[i,i-1] = -(r+0.5*sigma*sigma)*delta_t/(4*delta_S)-0.25*sigma*sigma*delta_t/(delta_S**2);
    A2[M-2,M-2] = 1+0.5*sigma*sigma*delta_t/(delta_S**2);
    A2[M-2,M-3] = -(r+0.5*sigma*sigma)*delta_t/(4*delta_S)-0.25*sigma*sigma*delta_t/(delta_S**2);
    a2 = -(r+0.5*sigma*sigma)*delta_t/(4*delta_S)-0.25*sigma*sigma*delta_t/(delta_S**2);
    b2 = (r+0.5*sigma*sigma)*delta_t/(4*delta_S)-0.25*sigma*sigma*delta_t/(delta_S**2);
    
    #set terminal value
    B = np.zeros([M-1, 1]);
    for i in range(M-1):
        B[i,0] = max(0.0, np.exp(y_values[i,0])-alpha);
    C1 = np.zeros([M-1, 1]);
    C1[0,0] = max(0.0,np.exp(S_values[0,0]-alpha));
    C2 = np.zeros([M-1, 1]);
    C2[M-2,0] = max(0.0,np.exp(S_values[M,0])-alpha);
    B = np.dot(A2, B);
    B = B + a2*C1 + b2*C2 - a1*C1 - b2*C2;    
    df = scipy.linalg.lu(A1, permute_l=True);
    L = mat(df[0]);
    U = mat(df[1]);
    L = L.I;
    U = U.I;
    B = np.dot(L, B);
    B = np.dot(U, B);
    
    #set the sudden change and do the loop
    for i in range(N):
        temp = B[no_S_steps-1, 0];
        for i in range(no_S_steps-1):
            B[i,0] = temp;
        B = np.dot(A2, B);
        B = B + a2*C1 + b2*C2 - a1*C1 - b2*C2;    
        df = scipy.linalg.lu(A1, permute_l=True);
        L = mat(df[0]);
        U = mat(df[1]);
        L = L.I;
        U = U.I;
        B = np.dot(L, B);
        B = np.dot(U, B);
    return np.exp(B[no_S_steps-1,0]);
